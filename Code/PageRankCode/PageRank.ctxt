#BlueJ class context
comment0.params=
comment0.target=void\ main()
comment0.text=\r\n\ Main\ utilis\u00E9\ pour\ des\ tests\r\n
comment1.params=
comment1.target=void\ initialisation()
comment10.params=longueur\ valeur_initialisation
comment10.target=double[]\ create_vector(int,\ int)
comment11.params=vector
comment11.target=double\ sum(double[])
comment12.params=matrice
comment12.target=void\ print_a_matrix(double[][])
comment12.text=\r\n\ METHOD\ PRINT_A_MATRIX\r\n\ \r\n\ -->\ Imprime\ la\ matrice\r\n\r\n\ @param\ matrice\ La\ matrice\ \u00E0\ imprimer\r\n
comment13.params=vector
comment13.target=void\ print_a_vector(double[])
comment13.text=\r\n\ METHOD\ PRINT_A_VECTOR\r\n\ \r\n\ -->\ Imprime\ le\ vecteur\r\n\r\n\ @param\ vector\ Le\ vecteur\ \u00E0\ imprimer\r\n
comment2.params=matrice
comment2.target=double[][]\ transition_matrix(double[][])
comment2.text=\r\n\ METHOD\ TRANSITION_MATRIX\r\n\r\n\ \ -->\ Calcule\ la\ matrice\ de\ transition\r\n\r\n\ @param\ matrice\ Une\ matrice\ NxN\r\n\ @return\ La\ matrice\ de\ transition\ NxN\r\n
comment3.params=matrice
comment3.target=double[]\ calcul(double[][])
comment3.text=\r\n\ M\u00E9thode\ qui\ calcule\ le\ score\ PageRank\ \u00E0\ partir\ de\ la\ matrice\ donn\u00E9e\ en\ argument.\r\n\ \r\n\ \r\n\ @pre\:\ Une\ matrice\ d\u2019adjacence\ A\ d\u2019un\ graphe\ dirig\u00E9,\ pond\u00E9r\u00E9\ \r\n\ \ \ \ \ \ \ et\ r\u00E9gulier\ G\ ainsi\ qu\u2019un\ param\u00E8tre\ de\ t\u00E9l\u00E9portation\ \r\n\ \ \ \ \ \ \ \u03B1\ entre\ 0\ et\ 1\ (inutile\ de\ le\ v\u00E9rifier)\ et\ un\ vecteur\ de\ personnalisation\ q.\r\n\ @post\:\ Un\ vecteur\ x\ contenant\ les\ scores\ d\u2019importance\ des\ noeuds\ ordonn\u00E9s\ \r\n\ \ \ \ \ \ \ \ dans\ le\ m\u00EAme\ ordre\ que\ la\ matrice\ d\u2019adjacence.\r\n
comment4.params=vector_1\ vector_2
comment4.target=double[]\ sum(double[],\ double[])
comment4.text=\r\n\ METHODE\ SUM\r\n\ \r\n\ -->\ Calcule\ la\ somme\ de\ deux\ vecteurs\r\n\r\n\ @param\ \ vector_1\ \ \ \ \ Un\ vecteur\ de\ taille\ N\r\n\ @param\ \ vector_2\ \ \ \ \ Un\ vecteur\ de\ taille\ N\r\n\ @return\ \ \ \ \ La\ somme\ des\ deux\ vecteurs\r\n
comment5.params=matrice\ vector
comment5.target=double[][]\ divise(double[][],\ double[])
comment5.text=\r\n\ METHOD\ DIVISE\r\n\r\n\ @param\ matrice\ Une\ matrice\ NxN\r\n\ @param\ vector\ Un\ vecteur\ de\ longueur\ N\r\n\ @return\ Retourne\ la\ division\ entre\ la\ matrice\ et\ le\ vecteur\ sous\ forme\ de\ matrice\ NxN\r\n
comment6.params=matrice
comment6.target=double[][]\ transpose(double[][])
comment6.text=\r\n\ METHOD\ TRANSPOSE\r\n\ \r\n\ -->\ Transpose\ une\ matrice\ NxN\r\n\ \r\n\ @param\ matrice\ La\ matrice\ que\ l'on\ veut\ transposer\r\n\ @return\ La\ matrice\ transpos\u00E9e\r\n
comment7.params=vector\ matrice\ alpha
comment7.target=double[]\ multiply(double[],\ double[][],\ double)
comment7.text=\r\n\ METHOD\ MULTIPLY\r\n\r\n\ -->\ Multiplie\ une\ matrice\ avec\ un\ vecteur\ et\ un\ coefficient\ alpha\r\n\r\n\ @param\ matrice_A\ La\ matrice\ A\ \r\n\ @param\ matrice_B\ La\ matrice\ B\r\n\ @return\ Le\ produit\ des\ deux\ matrices\ NxN\ sous\ forme\ de\ matrice\ NxN\r\n
comment8.params=vector\ facteur
comment8.target=double[]\ multiply(double[],\ double)
comment8.text=\r\n\ METHOD\ MULTIPLY\r\n\r\n\ -->\ Multiplie\ un\ vecteur\ avec\ un\ facteur\r\n\r\n\ @return\ Le\ produit\ ...\r\n
comment9.params=matrice
comment9.target=double[]\ degre(double[][])
comment9.text=\r\n\ METHOD\ DEGRE\r\n\r\n\ -->\ Calcule\ le\ vecteur\ de\ degr\u00E9\ de\ la\ matrice\r\n\r\n\ @param\ matrice\ La\ matrice\ a\ analyser\r\n\ @return\ Un\ vecteur\ contenant\ les\ degr\u00E9s\ des\ lignes\ de\ la\ matrice\r\n
numComments=14
