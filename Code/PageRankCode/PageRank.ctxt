#BlueJ class context
comment0.params=
comment0.target=void\ main()
comment0.text=\n\ Main\ utilis\u00E9\ pour\ des\ tests\n
comment1.params=to_convert
comment1.target=double[]\ convert(java.lang.String)
comment10.params=vector\ matrice\ alpha
comment10.target=double[]\ multiply(double[],\ double[][],\ double)
comment10.text=\n\ METHOD\ MULTIPLY\ \n\n\ -->\ Multiplie\ une\ matrice\ avec\ un\ vecteur\ et\ un\ coefficient\ alpha\n\ \ \ ->\ Pour\ le\ premier\ terme\ de\ la\ formule\n\ \ \n\ @param\ vector\ Le\ vecteur\ xT\n\ @param\ matrice\ La\ matrice\ de\ probabilit\u00E9\ de\ transition\n\ @param\ alpha\ Le\ coefficient\ alpha\n\ \n\ @return\ Le\ produit\ des\ deux\ matrices\ NxN\ sous\ forme\ de\ matrice\ NxN\n
comment11.params=vector\ facteur
comment11.target=double[]\ multiply(double[],\ double)
comment11.text=\n\ METHOD\ MULTIPLY\n\n\ -->\ Multiplie\ un\ vecteur\ avec\ un\ facteur\n\n\ @return\ Le\ produit\ ...\n
comment12.params=matrice
comment12.target=double[]\ degre(double[][])
comment12.text=\n\ METHOD\ DEGRE\n\n\ -->\ Calcule\ le\ vecteur\ de\ degr\u00E9\ de\ la\ matrice\n\n\ @param\ matrice\ La\ matrice\ a\ analyser\n\ @return\ Un\ vecteur\ contenant\ les\ degr\u00E9s\ des\ lignes\ de\ la\ matrice\n
comment13.params=longueur\ mode
comment13.target=double[]\ create_vector(int,\ int)
comment14.params=vector
comment14.target=double\ sum(double[])
comment15.params=matrice
comment15.target=void\ print_a_matrix(double[][])
comment15.text=\n\ METHOD\ PRINT_A_MATRIX\n\ \n\ -->\ Imprime\ la\ matrice\n\n\ @param\ matrice\ La\ matrice\ \u00E0\ imprimer\n
comment16.params=vector
comment16.target=void\ print_a_vector(double[])
comment16.text=\n\ METHOD\ PRINT_A_VECTOR\n\ \n\ -->\ Imprime\ le\ vecteur\n\n\ @param\ vector\ Le\ vecteur\ \u00E0\ imprimer\n
comment2.params=vect\ divise
comment2.target=double[]\ norme(double[],\ double)
comment3.params=first\ second
comment3.target=boolean\ condition(double[],\ double[])
comment4.params=vector_1\ vector_2
comment4.target=double[]\ minus(double[],\ double[])
comment4.text=\n\ METHODE\ MINUS\n\ \n\ -->\ Calcule\ la\ diff\u00E9rences\ de\ deux\ vecteurs\n\n\ @param\ \ vector_1\ \ \ \ \ Un\ vecteur\ de\ taille\ N\n\ @param\ \ vector_2\ \ \ \ \ Un\ vecteur\ de\ taille\ N\n\ @return\ \ \ \ \ La\ diff\u00E9rence\ entre\ les\ deux\ vecteurs\n
comment5.params=
comment5.target=java.lang.String[]\ initialisation()
comment6.params=matrice
comment6.target=double[][]\ transition_matrix(double[][])
comment6.text=\n\ METHOD\ TRANSITION_MATRIX\n\n\ \ -->\ Calcule\ la\ matrice\ de\ transition\n\n\ @param\ matrice\ Une\ matrice\ NxN\n\ @return\ La\ matrice\ de\ transition\ NxN\n
comment7.params=vector_1\ vector_2
comment7.target=double[]\ sum(double[],\ double[])
comment7.text=\n\ METHODE\ SUM\n\ \n\ -->\ Calcule\ la\ somme\ de\ deux\ vecteurs\n\n\ @param\ \ vector_1\ \ \ \ \ Un\ vecteur\ de\ taille\ N\n\ @param\ \ vector_2\ \ \ \ \ Un\ vecteur\ de\ taille\ N\n\ @return\ \ \ \ \ La\ somme\ des\ deux\ vecteurs\n
comment8.params=matrice\ vector
comment8.target=double[][]\ divise(double[][],\ double[])
comment8.text=\n\ METHOD\ DIVISE\n\n\ @param\ matrice\ Une\ matrice\ NxN\n\ @param\ vector\ Un\ vecteur\ de\ longueur\ N\n\ @return\ Retourne\ la\ division\ entre\ la\ matrice\ et\ le\ vecteur\ sous\ forme\ de\ matrice\ NxN\n
comment9.params=matrice
comment9.target=double[][]\ transpose(double[][])
comment9.text=\n\ METHOD\ TRANSPOSE\n\ \n\ -->\ Transpose\ une\ matrice\ NxN\n\ \n\ @param\ matrice\ La\ matrice\ que\ l'on\ veut\ transposer\n\ @return\ La\ matrice\ transpos\u00E9e\n
numComments=17
