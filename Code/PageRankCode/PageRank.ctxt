#BlueJ class context
comment0.params=args
comment0.target=void\ main(java.lang.String[])
comment0.text=\r\n\ Main\ \r\n
comment1.params=vect\ divise
comment1.target=double[]\ norme(double[],\ double)
comment1.text=\r\n\ METHOD\ NORME\r\n\ \r\n\ -->\ Calcule\ la\ norme\ du\ vecteur\r\n\r\n\ @param\ vect\ le\ vecteur\r\n\ @param\ divise\ la\ somme\ des\ \u00E9l\u00E9ments\ du\ vecteur\r\n\ \r\n\ @return\ retourne\ la\ norme\ du\ vecteur\r\n
comment10.params=vector\ facteur
comment10.target=double[]\ multiply(double[],\ double)
comment10.text=\r\n\ METHOD\ MULTIPLY\r\n\r\n\ -->\ Multiplie\ un\ vecteur\ avec\ un\ facteur\r\n\r\n\ @return\ Le\ produit\ du\ vecteur\ et\ du\ facteur\r\n
comment11.params=matrice
comment11.target=double[]\ degre(double[][])
comment11.text=\r\n\ METHOD\ DEGRE\r\n\r\n\ -->\ Calcule\ le\ vecteur\ de\ degr\u00E9\ de\ la\ matrice\r\n\r\n\ @param\ matrice\ La\ matrice\ a\ analyser\r\n\ @return\ Un\ vecteur\ contenant\ les\ degr\u00E9s\ des\ lignes\ de\ la\ matrice\r\n
comment12.params=longueur\ mode
comment12.target=double[]\ create_vector(int,\ int)
comment12.text=\r\n\ METHOD\ CREATE_VECTOR\r\n\ \r\n\ -->\ Cr\u00E9e\ un\ vecteur\ soit\ initialis\u00E9\ \u00E0\ 1\ (1,1,...,1),\ ou\ soit\ avec\ un\ 1\ et\ que\ des\ 0\ (1,0,...,0)\r\n\r\n\ @param\ longueur\ la\ longueur\ du\ vecteur\ \u00E0\ creer\ \r\n\ @param\ mode\ \ d\u00E9termine\ le\ mode\ que\ l'on\ veut\ utilis\u00E9\r\n\ \r\n\ @post\ retourne\ le\ vecteur\ de\ taille\ longueur\ et\ initialis\u00E9\ selon\ le\ mode\r\n
comment13.params=vector
comment13.target=double\ sum(double[])
comment13.text=\r\n\ METHOD\ SUM\r\n\ \r\n\ -->\ Calcule\ la\ somme\ des\ \u00E9l\u00E9ments\ du\ vecteurs\r\n\r\n\ @param\ vector\ \ \ \ Le\ vecteur\ \u00E0\ sommer\r\n\ @post\ retourne\ la\ somme\ des\ \u00E9l\u00E9ments\ du\ vecteur\r\n
comment14.params=matrice
comment14.target=void\ print_a_matrix(double[][])
comment14.text=\r\n\ METHOD\ PRINT_A_MATRIX\r\n\ \r\n\ -->\ Imprime\ la\ matrice\r\n\r\n\ @param\ matrice\ La\ matrice\ \u00E0\ imprimer\r\n
comment15.params=vector
comment15.target=void\ print_a_vector(double[])
comment15.text=\r\n\ METHOD\ PRINT_A_VECTOR\r\n\ \r\n\ -->\ Imprime\ le\ vecteur\r\n\r\n\ @param\ vector\ Le\ vecteur\ \u00E0\ imprimer\r\n
comment2.params=first\ second
comment2.target=boolean\ condition(double[],\ double[])
comment2.text=\r\n\ METHOD\ CONDITION\r\n\ \r\n\ -->\ Nous\ informe\ si\ nous\ avons\ pass\u00E9\ la\ condition\ de\ 10^-8\ pour\ la\ diff\u00E9rence\ entre\ les\ deux\ vecteurs\ page\ rank\r\n\r\n\ @param\ first\ le\ nouveau\ vecteur\r\n\ @param\ second\ l'ancien\ vecteur\r\n\ \r\n\ @return\ true\ si\ pas\ pass\u00E9e\ et\ false\ si\ oui\r\n
comment3.params=vector_1\ vector_2
comment3.target=double[]\ minus(double[],\ double[])
comment3.text=\r\n\ METHODE\ MINUS\r\n\ \r\n\ -->\ Calcule\ la\ diff\u00E9rences\ de\ deux\ vecteurs\r\n\r\n\ @param\ \ vector_1\ \ \ \ \ Un\ vecteur\ de\ taille\ N\r\n\ @param\ \ vector_2\ \ \ \ \ Un\ vecteur\ de\ taille\ N\r\n\ @return\ \ \ \ \ La\ diff\u00E9rence\ entre\ les\ deux\ vecteurs\r\n
comment4.params=
comment4.target=java.lang.String[]\ initialisation()
comment5.params=matrice
comment5.target=double[][]\ transition_matrix(double[][])
comment5.text=\r\n\ METHOD\ TRANSITION_MATRIX\r\n\r\n\ \ -->\ Calcule\ la\ matrice\ de\ transition\r\n\r\n\ @param\ matrice\ Une\ matrice\ NxN\r\n\ @return\ La\ matrice\ de\ transition\ NxN\r\n
comment6.params=vector_1\ vector_2
comment6.target=double[]\ sum(double[],\ double[])
comment6.text=\r\n\ METHODE\ SUM\r\n\ \r\n\ -->\ Calcule\ la\ somme\ de\ deux\ vecteurs\r\n\r\n\ @param\ \ vector_1\ \ \ \ \ Un\ vecteur\ de\ taille\ N\r\n\ @param\ \ vector_2\ \ \ \ \ Un\ vecteur\ de\ taille\ N\r\n\ @return\ \ \ \ \ La\ somme\ des\ deux\ vecteurs\r\n
comment7.params=matrice\ vector
comment7.target=double[][]\ divise(double[][],\ double[])
comment7.text=\r\n\ METHOD\ DIVISE\r\n\r\n\ @param\ matrice\ Une\ matrice\ NxN\r\n\ @param\ vector\ Un\ vecteur\ de\ longueur\ N\r\n\ @return\ Retourne\ la\ division\ entre\ la\ matrice\ et\ le\ vecteur\ sous\ forme\ de\ matrice\ NxN\r\n
comment8.params=matrice
comment8.target=double[][]\ transpose(double[][])
comment8.text=\r\n\ METHOD\ TRANSPOSE\r\n\ \r\n\ -->\ Transpose\ une\ matrice\ NxN\r\n\ \r\n\ @param\ matrice\ La\ matrice\ que\ l'on\ veut\ transposer\r\n\ @return\ La\ matrice\ transpos\u00E9e\r\n
comment9.params=vector\ matrice\ alpha
comment9.target=double[]\ multiply(double[],\ double[][],\ double)
comment9.text=\r\n\ METHOD\ MULTIPLY\ \r\n\r\n\ -->\ Multiplie\ une\ matrice\ avec\ un\ vecteur\ et\ un\ coefficient\ alpha\r\n\ \ \ ->\ Pour\ le\ premier\ terme\ de\ la\ formule\r\n\ \ \r\n\ @param\ vector\ Le\ vecteur\ xT\r\n\ @param\ matrice\ La\ matrice\ de\ probabilit\u00E9\ de\ transition\r\n\ @param\ alpha\ Le\ coefficient\ alpha\r\n\ \r\n\ @return\ Le\ produit\ du\ vecteur,\ de\ la\ matrice\ et\ du\ coefficient\ alpha\r\n
numComments=16
